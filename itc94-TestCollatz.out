==126== Memcheck, a memory error detector
==126== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==126== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==126== Command: ./TestCollatz
==126==
Running main() from gtest_main.cc
[==========] Running 22 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 22 tests from CollatzFixture
[ RUN      ] CollatzFixture.read
[       OK ] CollatzFixture.read (48 ms)
[ RUN      ] CollatzFixture.range_1
[       OK ] CollatzFixture.range_1 (3 ms)
[ RUN      ] CollatzFixture.range_2
[       OK ] CollatzFixture.range_2 (10 ms)
[ RUN      ] CollatzFixture.range_3
[       OK ] CollatzFixture.range_3 (3 ms)
[ RUN      ] CollatzFixture.cycle_length_1
[       OK ] CollatzFixture.cycle_length_1 (2 ms)
[ RUN      ] CollatzFixture.cycle_length_2
[       OK ] CollatzFixture.cycle_length_2 (2 ms)
[ RUN      ] CollatzFixture.cycle_length_3
[       OK ] CollatzFixture.cycle_length_3 (2 ms)
[ RUN      ] CollatzFixture.cycle_length_4
[       OK ] CollatzFixture.cycle_length_4 (1 ms)
[ RUN      ] CollatzFixture.cycle_length_5
[       OK ] CollatzFixture.cycle_length_5 (2 ms)
[ RUN      ] CollatzFixture.cycle_length_6
[       OK ] CollatzFixture.cycle_length_6 (2 ms)
[ RUN      ] CollatzFixture.cycle_length_lazy_1
[       OK ] CollatzFixture.cycle_length_lazy_1 (2 ms)
[ RUN      ] CollatzFixture.cycle_length_lazy_2
[       OK ] CollatzFixture.cycle_length_lazy_2 (63 ms)
[ RUN      ] CollatzFixture.cycle_length_lazy_3
[       OK ] CollatzFixture.cycle_length_lazy_3 (6 ms)
[ RUN      ] CollatzFixture.cycle_length_lazy_4
[       OK ] CollatzFixture.cycle_length_lazy_4 (17 ms)
[ RUN      ] CollatzFixture.cycle_length_lazy_5
[       OK ] CollatzFixture.cycle_length_lazy_5 (5 ms)
[ RUN      ] CollatzFixture.cycle_length_lazy_6
[       OK ] CollatzFixture.cycle_length_lazy_6 (10 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (3 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (43 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (3 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (117 ms)
[ RUN      ] CollatzFixture.print
[       OK ] CollatzFixture.print (7 ms)
[ RUN      ] CollatzFixture.solve
[       OK ] CollatzFixture.solve (9 ms)
[----------] 22 tests from CollatzFixture (512 ms total)

[----------] Global test environment tear-down
[==========] 22 tests from 1 test case ran. (609 ms total)
[  PASSED  ] 22 tests.
==126==
==126== HEAP SUMMARY:
==126==     in use at exit: 72,704 bytes in 1 blocks
==126==   total heap usage: 1,861 allocs, 1,860 frees, 208,364 bytes allocated
==126==
==126== LEAK SUMMARY:
==126==    definitely lost: 0 bytes in 0 blocks
==126==    indirectly lost: 0 bytes in 0 blocks
==126==      possibly lost: 0 bytes in 0 blocks
==126==    still reachable: 72,704 bytes in 1 blocks
==126==         suppressed: 0 bytes in 0 blocks
==126== Rerun with --leak-check=full to see details of leaked memory
==126==
==126== For counts of detected and suppressed errors, rerun with: -v
==126== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:100.00% of 39
Branches executed:100.00% of 30
Taken at least once:76.67% of 30
Calls executed:100.00% of 25
Creating 'Collatz.c++.gcov'
