==218== Memcheck, a memory error detector
==218== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==218== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==218== Command: ./TestCollatz
==218== 
Running main() from gtest_main.cc
[==========] Running 27 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 27 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_1
[       OK ] CollatzFixture.read_1 (35 ms)
[ RUN      ] CollatzFixture.read_2
[       OK ] CollatzFixture.read_2 (6 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (7 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (3 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (3 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (4 ms)
[ RUN      ] CollatzFixture.eval_5
[       OK ] CollatzFixture.eval_5 (3 ms)
[ RUN      ] CollatzFixture.eval_6
[       OK ] CollatzFixture.eval_6 (109 ms)
[ RUN      ] CollatzFixture.print_1
[       OK ] CollatzFixture.print_1 (12 ms)
[ RUN      ] CollatzFixture.print_2
[       OK ] CollatzFixture.print_2 (4 ms)
[ RUN      ] CollatzFixture.solve_1
[       OK ] CollatzFixture.solve_1 (9 ms)
[ RUN      ] CollatzFixture.solve_2
[       OK ] CollatzFixture.solve_2 (6 ms)
[ RUN      ] CollatzFixture.solve_3
[       OK ] CollatzFixture.solve_3 (6 ms)
[ RUN      ] CollatzFixture.get_cycle_length_1
[       OK ] CollatzFixture.get_cycle_length_1 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_2
[       OK ] CollatzFixture.get_cycle_length_2 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_3
[       OK ] CollatzFixture.get_cycle_length_3 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_4
[       OK ] CollatzFixture.get_cycle_length_4 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_5
[       OK ] CollatzFixture.get_cycle_length_5 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_6
[       OK ] CollatzFixture.get_cycle_length_6 (4 ms)
[ RUN      ] CollatzFixture.get_cycle_length_7
[       OK ] CollatzFixture.get_cycle_length_7 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_8
[       OK ] CollatzFixture.get_cycle_length_8 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_9
[       OK ] CollatzFixture.get_cycle_length_9 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_10
[       OK ] CollatzFixture.get_cycle_length_10 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_11
[       OK ] CollatzFixture.get_cycle_length_11 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_12
[       OK ] CollatzFixture.get_cycle_length_12 (3 ms)
[ RUN      ] CollatzFixture.get_cycle_length_13
[       OK ] CollatzFixture.get_cycle_length_13 (4 ms)
[ RUN      ] CollatzFixture.get_cycle_length_14
[       OK ] CollatzFixture.get_cycle_length_14 (3 ms)
[----------] 27 tests from CollatzFixture (275 ms total)

[----------] Global test environment tear-down
[==========] 27 tests from 1 test case ran. (364 ms total)
[  PASSED  ] 27 tests.
==218== 
==218== HEAP SUMMARY:
==218==     in use at exit: 72,704 bytes in 1 blocks
==218==   total heap usage: 407 allocs, 406 frees, 636,841 bytes allocated
==218== 
==218== LEAK SUMMARY:
==218==    definitely lost: 0 bytes in 0 blocks
==218==    indirectly lost: 0 bytes in 0 blocks
==218==      possibly lost: 0 bytes in 0 blocks
==218==    still reachable: 72,704 bytes in 1 blocks
==218==         suppressed: 0 bytes in 0 blocks
==218== Rerun with --leak-check=full to see details of leaked memory
==218== 
==218== For counts of detected and suppressed errors, rerun with: -v
==218== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:100.00% of 43
Branches executed:100.00% of 34
Taken at least once:82.35% of 34
Calls executed:95.83% of 24
Creating 'Collatz.c++.gcov'
