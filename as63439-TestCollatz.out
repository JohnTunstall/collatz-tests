==78== Memcheck, a memory error detector
==78== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==78== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==78== Command: ./TestCollatz
==78== 
Running main() from gtest_main.cc
[==========] Running 13 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 13 tests from CollatzFixture
[ RUN      ] CollatzFixture.read
[       OK ] CollatzFixture.read (29 ms)
[ RUN      ] CollatzFixture.read_2
[       OK ] CollatzFixture.read_2 (4 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (5 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (3 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (2 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (3 ms)
[ RUN      ] CollatzFixture.i_equals_j
[       OK ] CollatzFixture.i_equals_j (3 ms)
[ RUN      ] CollatzFixture.i_greater_j
[       OK ] CollatzFixture.i_greater_j (2 ms)
[ RUN      ] CollatzFixture.print
[       OK ] CollatzFixture.print (9 ms)
[ RUN      ] CollatzFixture.print_2
[       OK ] CollatzFixture.print_2 (4 ms)
[ RUN      ] CollatzFixture.print_3
[       OK ] CollatzFixture.print_3 (4 ms)
[ RUN      ] CollatzFixture.solve
[       OK ] CollatzFixture.solve (7 ms)
[ RUN      ] CollatzFixture.solve_2
[       OK ] CollatzFixture.solve_2 (4 ms)
[----------] 13 tests from CollatzFixture (111 ms total)

[----------] Global test environment tear-down
[==========] 13 tests from 1 test case ran. (177 ms total)
[  PASSED  ] 13 tests.
==78== 
==78== HEAP SUMMARY:
==78==     in use at exit: 72,704 bytes in 1 blocks
==78==   total heap usage: 261 allocs, 260 frees, 135,388 bytes allocated
==78== 
==78== LEAK SUMMARY:
==78==    definitely lost: 0 bytes in 0 blocks
==78==    indirectly lost: 0 bytes in 0 blocks
==78==      possibly lost: 0 bytes in 0 blocks
==78==    still reachable: 72,704 bytes in 1 blocks
==78==         suppressed: 0 bytes in 0 blocks
==78== Rerun with --leak-check=full to see details of leaked memory
==78== 
==78== For counts of detected and suppressed errors, rerun with: -v
==78== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:100.00% of 39
Branches executed:100.00% of 32
Taken at least once:81.25% of 32
Calls executed:100.00% of 13
Creating 'Collatz.c++.gcov'
