==11789== Memcheck, a memory error detector
==11789== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==11789== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==11789== Command: ./xz4493-TestCollatz
==11789==
Running main() from gtest_main.cc
[==========] Running 12 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 12 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_zero
[       OK ] CollatzFixture.read_zero (21 ms)
[ RUN      ] CollatzFixture.read_one
[       OK ] CollatzFixture.read_one (10 ms)
[ RUN      ] CollatzFixture.read_two
[       OK ] CollatzFixture.read_two (8 ms)
[ RUN      ] CollatzFixture.eval_small_numbers_single
[       OK ] CollatzFixture.eval_small_numbers_single (6 ms)
[ RUN      ] CollatzFixture.eval_large_numbers_single
[       OK ] CollatzFixture.eval_large_numbers_single (5 ms)
[ RUN      ] CollatzFixture.eval_large_numbers_range
[       OK ] CollatzFixture.eval_large_numbers_range (127 ms)
[ RUN      ] CollatzFixture.print_one
[       OK ] CollatzFixture.print_one (8 ms)
[ RUN      ] CollatzFixture.print_two
[       OK ] CollatzFixture.print_two (4 ms)
[ RUN      ] CollatzFixture.solve_one
[       OK ] CollatzFixture.solve_one (4 ms)
[ RUN      ] CollatzFixture.solve_small
[       OK ] CollatzFixture.solve_small (5 ms)
[ RUN      ] CollatzFixture.solve_large_single
[       OK ] CollatzFixture.solve_large_single (4 ms)
[ RUN      ] CollatzFixture.solve_large_range
[       OK ] CollatzFixture.solve_large_range (36 ms)
[----------] 12 tests from CollatzFixture (267 ms total)

[----------] Global test environment tear-down
[==========] 12 tests from 1 test case ran. (335 ms total)
[  PASSED  ] 12 tests.
==11789==
==11789== HEAP SUMMARY:
==11789==     in use at exit: 72,704 bytes in 1 blocks
==11789==   total heap usage: 279 allocs, 278 frees, 135,112 bytes allocated
==11789==
==11789== LEAK SUMMARY:
==11789==    definitely lost: 0 bytes in 0 blocks
==11789==    indirectly lost: 0 bytes in 0 blocks
==11789==      possibly lost: 0 bytes in 0 blocks
==11789==    still reachable: 72,704 bytes in 1 blocks
==11789==         suppressed: 0 bytes in 0 blocks
==11789== Rerun with --leak-check=full to see details of leaked memory
==11789==
==11789== For counts of detected and suppressed errors, rerun with: -v
==11789== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:98.08% of 52
Branches executed:100.00% of 39
Taken at least once:74.36% of 39
Calls executed:75.00% of 20
Creating 'Collatz.c++.gcov'
